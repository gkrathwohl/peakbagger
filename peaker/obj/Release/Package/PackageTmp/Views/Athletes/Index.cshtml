@model peaker.ViewModels.AthleteDetailViewModel

@{
    Layout = null;
}

<!DOCTYPE html>
<html>

<head>

    @Styles.Render("~/Content/css")

    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />

    @*<link href='https://api.mapbox.com/mapbox.js/v2.4.0/mapbox.css' rel='stylesheet' />
    <script src='https://api.mapbox.com/mapbox.js/v2.4.0/mapbox.js'></script>*@

    <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.18.0/mapbox-gl.js'></script>
    <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.18.0/mapbox-gl.css' rel='stylesheet' />

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.2/jquery.min.js"></script>


    <style>
        body {
            margin: 0;
            padding: 0;
        }

        #map {
            /*position: absolute;
            top: 0;
            bottom: 0;*/
            width: 100%;
            height: 500px;
        }

        .mapboxgl-popup {
            max-width: 400px;
            font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;
        }

        .marker-title {
            font-weight: 700;
        }

    </style>
</head>

<body>

    <p>Welcome, @Model.AthleteName</p>
    <p>We've indexed @Model.IndexedActivityCount activities</p>
    <p>You've summited @Model.AthleteSummitCompletions.Count() peaks!!</p>

    <div class="col-lg-5">
        <table class="table">
            <tr>
                <th>
                    Summit Completions
                </th>
                <th>
                    Height
                </th>
                <th>
                    Date
                </th>
                <th>
                    Strava
                </th>
            </tr>

            @foreach (var peak in Model.AthleteSummitCompletions)
            {
                <tr>
                    <td>
                        @Html.ActionLink(@peak.Peak.Name, "Details", "Peaks", new { id = @peak.Peak.Id }, null)
                    </td>
                    <td>
                        @((int)(peak.Peak.ELEV_METER * 3.28084)) ft
                    </td>
                    <td>
                        date
                    </td>
                    <td>
                        <a href="http://strava.com/activities/@peak.StravaActivityId">Activity</a>
                    </td>
                </tr>
            }

        </table>
    </div>
    <div class="col-lg-7">
        <div id='map'></div>
    </div>

    <script>

        mapboxgl.accessToken = 'pk.eyJ1IjoiZ2tyYXRod29obCIsImEiOiJ5bXlHNXJJIn0.gjNMPWKFNso_Z5EmEjsFGA';

        var featureList = [];

        $(document).ready(function () {
            var actionUrl = '@Url.Action("GetAthleteSummits", "Athletes", new { id=Model.AthleteId })';
            $.getJSON(actionUrl, displayData);
        });

        function displayData(response) {
            if (response != null) {
                console.log(response);
            }

            $.each(response, function (i, summit) {
                featureList.push({
                    "type": "Feature",
                    "properties": {
                        "description": "<div class=\"marker-title\">" + summit.Peak.Name + "</div><p>Elevation: " + (summit.Peak.ELEV_METER * 3.28084).toFixed(0) + "ft </p><p><a href=\"http://strava.com/activities/" + summit.StravaActivityId + "\" target=\"_blank\" title=\"Opens in a new window\">View on Strava</a></p>",
                        "marker-symbol": "mountain",
                        "icon-color": "#FF5900"
                    },
                    "geometry": {
                        "type": "Point",
                        "coordinates": [summit.Peak.Longitude.toFixed(4), summit.Peak.Latitude.toFixed(4)]
                    }
                });
            });



            var markers = {
                "type": "FeatureCollection",
                "features": featureList
            };

            var map = new mapboxgl.Map({
                container: 'map',
                style: 'mapbox://styles/mapbox/streets-v8',
                center: [-77.007481, 38.896516],
                zoom: 11.15
            });

            map.on('load', function () {
                // Add marker data as a new GeoJSON source.
                map.addSource("markers", {
                    "type": "geojson",
                    "data": markers
                });

                // Add a layer showing the markers.
                map.addLayer({
                    "id": "markers",
                    "type": "symbol",
                    "source": "markers",
                    "layout": {
                        "icon-image": "{marker-symbol}-15",
                        "icon-allow-overlap": true
                    }
                });

                // fit to bounds
                var bounds = new mapboxgl.LngLatBounds();
                markers.features.forEach(function (feature) {
                    bounds.extend(feature.geometry.coordinates);
                });
                map.fitBounds(bounds);

            });


        // When a click event occurs near a marker icon, open a popup at the location of
        // the feature, with description HTML from its properties.
            map.on('click', function (e) {
                var features = map.queryRenderedFeatures(e.point, { layers: ['markers'] });

                if (!features.length) {
                    return;
                }

                var feature = features[0];

                map.flyTo({ center: feature.geometry.coordinates });

                // Populate the popup and set its coordinates
                // based on the feature found.
                var popup = new mapboxgl.Popup()
                    .setLngLat(feature.geometry.coordinates)
                    .setHTML(feature.properties.description)
                    .addTo(map);
            });

            map.on('mousemove', function (e) {
                var features = map.queryRenderedFeatures(e.point, { layers: ['markers'] });
                map.getCanvas().style.cursor = (features.length) ? 'pointer' : '';
            });
        }

    </script>

</body>
</html>